#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Terme {
    double coeff;
    int exp;
    struct Terme* suivant;
} Terme;

Terme* creerTerme(double coeff, int exp) {
    Terme* nouveauTerme = (Terme*)malloc(sizeof(Terme));
    nouveauTerme->coeff = coeff;
    nouveauTerme->exp = exp;
    nouveauTerme->suivant = NULL;
    return nouveauTerme;
}

void ajouterTerme(Terme** poly, double coeff, int exp) {
    Terme* nouveauTerme = creerTerme(coeff, exp);
    if (*poly == NULL || (*poly)->exp < exp) {
        nouveauTerme->suivant = *poly;
        *poly = nouveauTerme;
    } else {
        Terme* courant = *poly;
        while (courant->suivant != NULL && courant->suivant->exp > exp) {
            courant = courant->suivant;
        }
        if (courant->suivant != NULL && courant->suivant->exp == exp) {
            courant->suivant->coeff += coeff;
            free(nouveauTerme);
        } else {
            nouveauTerme->suivant = courant->suivant;
            courant->suivant = nouveauTerme;
        }
    }
}

void afficherPolynome(Terme* poly) {
    Terme* courant = poly;
    if (courant == NULL) {
        printf("0\n");
        return;
    }
    while (courant != NULL) {
        if (courant->coeff != 0) {
            if (courant->exp == 0)
                printf("%.2f", courant->coeff);
            else
                printf("%.2fx^%d", courant->coeff, courant->exp);
            if (courant->suivant != NULL && courant->suivant->coeff > 0)
                printf(" + ");
            else if (courant->suivant != NULL)
                printf(" - ");
        }
        courant = courant->suivant;
    }
    printf("\n");
}

Terme* additionPolynomes(Terme* poly1, Terme* poly2) {
    Terme* resultat = NULL;
    Terme* p1 = poly1;
    Terme* p2 = poly2;

    while (p1 != NULL || p2 != NULL) {
        if (p1 == NULL) {
            ajouterTerme(&resultat, p2->coeff, p2->exp);
            p2 = p2->suivant;
        } else if (p2 == NULL) {
            ajouterTerme(&resultat, p1->coeff, p1->exp);
            p1 = p1->suivant;
        } else if (p1->exp > p2->exp) {
            ajouterTerme(&resultat, p1->coeff, p1->exp);
            p1 = p1->suivant;
        } else if (p1->exp < p2->exp) {
            ajouterTerme(&resultat, p2->coeff, p2->exp);
            p2 = p2->suivant;
        } else {
            ajouterTerme(&resultat, p1->coeff + p2->coeff, p1->exp);
            p1 = p1->suivant;
            p2 = p2->suivant;
        }
    }
    return resultat;
}

Terme* soustractionPolynomes(Terme* poly1, Terme* poly2) {
    Terme* resultat = NULL;
    Terme* p1 = poly1;
    Terme* p2 = poly2;

    while (p1 != NULL || p2 != NULL) {
        if (p1 == NULL) {
            ajouterTerme(&resultat, -p2->coeff, p2->exp);
            p2 = p2->suivant;
        } else if (p2 == NULL) {
            ajouterTerme(&resultat, p1->coeff, p1->exp);
            p1 = p1->suivant;
        } else if (p1->exp > p2->exp) {
            ajouterTerme(&resultat, p1->coeff, p1->exp);
            p1 = p1->suivant;
        } else if (p1->exp < p2->exp) {
            ajouterTerme(&resultat, -p2->coeff, p2->exp);
            p2 = p2->suivant;
        } else {
            ajouterTerme(&resultat, p1->coeff - p2->coeff, p1->exp);
            p1 = p1->suivant;
            p2 = p2->suivant;
        }
    }
    return resultat;
}

Terme* multiplicationPolynomes(Terme* poly1, Terme* poly2) {
    Terme* resultat = NULL;
    Terme* p1 = poly1;
    Terme* p2 = poly2;

    while (p1 != NULL) {
        while (p2 != NULL) {
            ajouterTerme(&resultat, p1->coeff * p2->coeff, p1->exp + p2->exp);
            p2 = p2->suivant;
        }
        p2 = poly2;
        p1 = p1->suivant;
    }
    return resultat;
}

double evaluerPolynome(Terme* poly, double x) {
    double resultat = 0;
    Terme* courant = poly;
    while (courant != NULL) {
        resultat += courant->coeff * pow(x, courant->exp);
        courant = courant->suivant;
    }
    return resultat;
}

Terme* derivationPolynome(Terme* poly) {
    Terme* resultat = NULL;
    Terme* courant = poly;
    while (courant != NULL) {
        if (courant->exp > 0) {
            ajouterTerme(&resultat, courant->coeff * courant->exp, courant->exp - 1);
        }
        courant = courant->suivant;
    }
    return resultat;
}

Terme* primitivePolynome(Terme* poly) {
    Terme* resultat = NULL;
    Terme* courant = poly;
    while (courant != NULL) {
        ajouterTerme(&resultat, courant->coeff / (courant->exp + 1), courant->exp + 1);
        courant = courant->suivant;
    }
    return resultat;
}

void afficherPolynomesPredefinis() {
    printf("Polynômes prédéfinis disponibles :\n");
    printf("1. 3x^2 + 2x + 1\n");
    printf("2. x^2 - 1\n");
    printf("3. 2x^3 + 5x^2 - x + 4\n");
    printf("4. x^3 + 3x^2 - 4x + 2\n");
    printf("5. 5x^2 - 3x + 2\n");
}

Terme* choisirPolynome(int choix) {
    Terme* poly = NULL;
    switch (choix) {
    case 1:
        ajouterTerme(&poly, 3.0, 2);
        ajouterTerme(&poly, 2.0, 1);
        ajouterTerme(&poly, 1.0, 0);
        break;
    case 2:
        ajouterTerme(&poly, 1.0, 2);
        ajouterTerme(&poly, -1.0, 0);
        break;
    case 3:
        ajouterTerme(&poly, 2.0, 3);
        ajouterTerme(&poly, 5.0, 2);
        ajouterTerme(&poly, -1.0, 1);
        ajouterTerme(&poly, 4.0, 0);
        break;
    case 4:
        ajouterTerme(&poly, 1.0, 3);
        ajouterTerme(&poly, 3.0, 2);
        ajouterTerme(&poly, -4.0, 1);
        ajouterTerme(&poly, 2.0, 0);
        break;
    case 5:
        ajouterTerme(&poly, 5.0, 2);
        ajouterTerme(&poly, -3.0, 1);
        ajouterTerme(&poly, 2.0, 0);
        break;
    default:
        printf("Choix invalide.\n");
        return NULL;
    }
    return poly;
}

void menu() {
    printf("Opérations possibles sur les polynômes :\n");
    printf("1. Addition\n");
    printf("2. Soustraction\n");
    printf("3. Multiplication\n");
    printf("4. Evaluation\n");
    printf("5. Dérivée\n");
    printf("6. Primitive\n");
    printf("Choisissez une opération : ");
}

int main() {
    int choixOp;
    menu();
    scanf("%d", &choixOp);

    Terme* poly1 = NULL, *poly2 = NULL;

    if (choixOp == 1 || choixOp == 2 || choixOp == 3) {
        afficherPolynomesPredefinis();
        printf("Choisissez le premier polynôme (1-5) : ");
        int choixPoly1;
        scanf("%d", &choixPoly1);
        poly1 = choisirPolynome(choixPoly1);

        printf("Choisissez le deuxième polynôme (1-5) : ");
        int choixPoly2;
        scanf("%d", &choixPoly2);
        poly2 = choisirPolynome(choixPoly2);
    } else {
        afficherPolynomesPredefinis();
        printf("Choisissez le polynôme (1-5) : ");
        int choixPoly1;
        scanf("%d", &choixPoly1);
        poly1 = choisirPolynome(choixPoly1);
    }

    switch (choixOp) {
    case 1: {
        Terme* resultat = additionPolynomes(poly1, poly2);
        printf("Résultat de l'addition : ");
        afficherPolynome(resultat);
        break;
    }
    case 2: {
        Terme* resultat = soustractionPolynomes(poly1, poly2);
        printf("Résultat de la soustraction : ");
        afficherPolynome(resultat);
        break;
    }
    case 3: {
        Terme* resultat = multiplicationPolynomes(poly1, poly2);
        printf("Résultat de la multiplication : ");
        afficherPolynome(resultat);
        break;
    }
    case 4: {
        double x;
        printf("Entrez la valeur de x : ");
        scanf("%lf", &x);
        double resultat = evaluerPolynome(poly1, x);
        printf("Le résultat de l'évaluation du polynôme pour x = %.2f est : %.2f\n", x, resultat);
        break;
    }
    case 5: {
        Terme* resultat = derivationPolynome(poly1);
        printf("Résultat de la dérivée : ");
        afficherPolynome(resultat);
        break;
    }
    case 6: {
        Terme* resultat = primitivePolynome(poly1);
        printf("Résultat de la primitive : ");
        afficherPolynome(resultat);
        break;
    }
    default:
        printf("Opération non implémentée.\n");
    }

    return 0;
}
